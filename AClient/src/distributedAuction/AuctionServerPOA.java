package distributedAuction;


/**
* distributedAuction/AuctionServerPOA.java .
* Generated by the IDL-to-Java compiler (portable), version "3.2"
* from chat.idl
* Wednesday, March 8, 2017 4:04:33 PM CST
*/

public abstract class AuctionServerPOA extends org.omg.PortableServer.Servant
 implements distributedAuction.AuctionServerOperations, org.omg.CORBA.portable.InvokeHandler
{

  // Constructors

  private static java.util.Hashtable _methods = new java.util.Hashtable ();
  static
  {
    _methods.put ("subscribe", new java.lang.Integer (0));
    _methods.put ("unsubscribe", new java.lang.Integer (1));
    _methods.put ("comment", new java.lang.Integer (2));
    _methods.put ("isAuctionEmpty", new java.lang.Integer (3));
    _methods.put ("setID", new java.lang.Integer (4));
    _methods.put ("viewHighestBidder", new java.lang.Integer (5));
    _methods.put ("offer", new java.lang.Integer (6));
    _methods.put ("bid", new java.lang.Integer (7));
    _methods.put ("viewAuctionStatus", new java.lang.Integer (8));
    _methods.put ("viewBidStatus", new java.lang.Integer (9));
    _methods.put ("sell", new java.lang.Integer (10));
  }

  public org.omg.CORBA.portable.OutputStream _invoke (String $method,
                                org.omg.CORBA.portable.InputStream in,
                                org.omg.CORBA.portable.ResponseHandler $rh)
  {
    org.omg.CORBA.portable.OutputStream out = null;
    java.lang.Integer __method = (java.lang.Integer)_methods.get ($method);
    if (__method == null)
      throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);

    switch (__method.intValue ())
    {
       case 0:  // distributedAuction/AuctionServer/subscribe
       {
         try {
           String userID = in.read_string ();
           distributedAuction.AuctionClient c = distributedAuction.AuctionClientHelper.read (in);
           int clientType = in.read_long ();
           String $result = null;
           $result = this.subscribe (userID, c, clientType);
           out = $rh.createReply();
           out.write_string ($result);
         } catch (distributedAuction.NameAlreadyUsed $ex) {
           out = $rh.createExceptionReply ();
           distributedAuction.NameAlreadyUsedHelper.write (out, $ex);
         }
         break;
       }

       case 1:  // distributedAuction/AuctionServer/unsubscribe
       {
         try {
           String id = in.read_string ();
           int clientType = in.read_long ();
           this.unsubscribe (id, clientType);
           out = $rh.createReply();
         } catch (distributedAuction.UnknownID $ex) {
           out = $rh.createExceptionReply ();
           distributedAuction.UnknownIDHelper.write (out, $ex);
         }
         break;
       }

       case 2:  // distributedAuction/AuctionServer/comment
       {
         try {
           String id = in.read_string ();
           String text = in.read_string ();
           this.comment (id, text);
           out = $rh.createReply();
         } catch (distributedAuction.UnknownID $ex) {
           out = $rh.createExceptionReply ();
           distributedAuction.UnknownIDHelper.write (out, $ex);
         }
         break;
       }

       case 3:  // distributedAuction/AuctionServer/isAuctionEmpty
       {
         boolean $result = false;
         $result = this.isAuctionEmpty ();
         out = $rh.createReply();
         out.write_boolean ($result);
         break;
       }

       case 4:  // distributedAuction/AuctionServer/setID
       {
         String id = in.read_string ();
         this.setID (id);
         out = $rh.createReply();
         break;
       }

       case 5:  // distributedAuction/AuctionServer/viewHighestBidder
       {
         String ID = in.read_string ();
         this.viewHighestBidder (ID);
         out = $rh.createReply();
         break;
       }

       case 6:  // distributedAuction/AuctionServer/offer
       {
         String ID = in.read_string ();
         String name = in.read_string ();
         String description = in.read_string ();
         int price = in.read_long ();
         this.offer (ID, name, description, price);
         out = $rh.createReply();
         break;
       }

       case 7:  // distributedAuction/AuctionServer/bid
       {
         String ID = in.read_string ();
         int amount = in.read_long ();
         this.bid (ID, amount);
         out = $rh.createReply();
         break;
       }

       case 8:  // distributedAuction/AuctionServer/viewAuctionStatus
       {
         String id = in.read_string ();
         this.viewAuctionStatus (id);
         out = $rh.createReply();
         break;
       }

       case 9:  // distributedAuction/AuctionServer/viewBidStatus
       {
         String id = in.read_string ();
         this.viewBidStatus (id);
         out = $rh.createReply();
         break;
       }

       case 10:  // distributedAuction/AuctionServer/sell
       {
         String $result = null;
         $result = this.sell ();
         out = $rh.createReply();
         out.write_string ($result);
         break;
       }

       default:
         throw new org.omg.CORBA.BAD_OPERATION (0, org.omg.CORBA.CompletionStatus.COMPLETED_MAYBE);
    }

    return out;
  } // _invoke

  // Type-specific CORBA::Object operations
  private static String[] __ids = {
    "IDL:distributedAuction/AuctionServer:1.0"};

  public String[] _all_interfaces (org.omg.PortableServer.POA poa, byte[] objectId)
  {
    return (String[])__ids.clone ();
  }

  public AuctionServer _this() 
  {
    return AuctionServerHelper.narrow(
    super._this_object());
  }

  public AuctionServer _this(org.omg.CORBA.ORB orb) 
  {
    return AuctionServerHelper.narrow(
    super._this_object(orb));
  }


} // class AuctionServerPOA
